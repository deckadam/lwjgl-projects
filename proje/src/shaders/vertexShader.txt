#version 400 core

in vec3 position;
in vec2 texturecoords;
in vec3 normal;

out vec2 out_texturecoords;
out vec3 surfaceNormal;
out vec3 toLightVector[4];
out vec3 toCameraVector;
out float visibility;
out vec4 shadowCoords;


uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPosition[4];
uniform float useFakeLighting;
uniform float numberOfRows;
uniform vec2 offset;
uniform vec4 plane;

uniform mat4 toShadowMapSpace;

const float density=0.005;
const float gradient=3.0;

void main (void){
	vec4 worldPosition=transformationMatrix * vec4(position,1.0);
	
	shadowCoords=toShadowMapSpace*worldPosition;
	
	gl_ClipDistance[0]=dot ( worldPosition , plane);
	vec4 positionRelativity =viewMatrix*worldPosition;
	gl_Position = projectionMatrix*positionRelativity;
	float distance= length(positionRelativity.xyz);
	visibility= exp(-pow((distance*density),gradient)); 
	visibility=clamp(visibility,0.0,1.0);
	out_texturecoords=(texturecoords/numberOfRows)+offset;
	
	vec3 actualNormal=normal;
	if(useFakeLighting>0.5){actualNormal=vec3(0.0,1.0,0.0);}
	
	surfaceNormal=(transformationMatrix* vec4(actualNormal,0.0)).xyz;
	for(int i =0;i<4;i++){
		toLightVector[i]=lightPosition[i]-worldPosition.xyz;
	}
	toCameraVector=(inverse(viewMatrix)*vec4(0.0,0.0,0.0,1.0)).xyz-worldPosition.xyz;
	
}


